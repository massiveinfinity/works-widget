apply plugin: 'com.android.library'
apply plugin: 'signing'

repositories {
    mavenCentral()
}

group 'com.mobilesolutionworks'
version '1.0'

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion 1
        targetSdkVersion project.ANDROID_BUILD_TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            runProguard Boolean.parseBoolean(project.RUN_PROGUARD)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

def generatePom() {
    def pom = pom {
        project {
            name 'works-widget'
            packaging 'aar'
            groupId project.group
            artifactId project.name
            version project.version
            description 'Works Widget for Android'
            inceptionYear '2014'
            url 'http://sg.linkedin.com/in/yunarta/'

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0'
                    distribution 'repo'
                }
            }

            scm {
                url                 "https://github.com/yunarta/works-widget"
                connection          "scm:git:git@github.com:yunarta/works-widget.git"
                developerConnection "scm:git:git@github.com:yunarta/works-widget.git"
            }


            developers {
                developer {
                    id 'yunarta'
                    name 'Yunarta Kartawahyudi'
                    email 'yunarta.kartawahyudi@gmail.com'
                    url 'http://sg.linkedin.com/in/yunarta/'
                    roles {
                        role 'author'
                        role 'developer'
                    }
                    timezone '+8'
                }
            }
        }
    }
}

signing {
    required { has("release") && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }
            pom = generatePom()

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword )
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: sonatypeUsername, password: sonatypePassword )
            }
        }
    }
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    task("javadoc${variant.name.capitalize()}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = project.SDK_DIR + "/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
    }

    task("bundleJavadoc${variant.name.capitalize()}", type: Jar) {
        description "Bundles Javadoc into zip for $variant.name."
        classifier = "javadoc"
        from tasks["javadoc${variant.name.capitalize()}"]
    }

}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task jar(type: Jar) {
    from 'build/intermediates/classes/release'
}

task javadocJar(type: Jar, dependsOn: "javadocRelease") {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar
    archives javadocJar
    archives jar
}